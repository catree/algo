FEATURES:
-	Unweighted Graph:
	-	Shortest Path
-	Weighted Graph:
	-	Shortest Path
-	Simulated Annealing

API CHANGES:
-	Add functions to retrieve an object's buffer size. This may require renaming algoFooBufferSize() to algoFooMinimumBufferSize()
	or something similar.
-	Add graph function to reorder valid vertex list to optimize future traversal passes.
-	Detailed error codes. We have 4 billion possible errors; why not be specific about what's wrong?
	-	15: 0: category-specific error code
	-	30:16: category code
	-	   31: Always set (except for kAlgoErrorNone = 0)
-	Add a dirty counter to the graph, incremented whenever it changes. Copy dirty counter when bfs/dfsstate is created.
	Check that counters match in Bfs/Dfs functions.
-	AlgoError algoFoo(int x, int y, int *outZ)
	-	ALGO_VALIDATE works!
	-	calling code can be cumbersome
	int algoFoo(int x, int y, AlgoError *outError)
	int algoFoo(AlgoError *outError, int x, int y)
	-	no ALGO_VALIDATE
	-	Extra unused parameter on the stack, and in calling code (unless I go full-on macro hell)
-	AlgoData 32-bit/64-bit weirdness
	#define AlgoData intptr_t -- guaranteed to be the right size on all platforms
	-	AlgoDataFromPtr:	easy
	-	AlgoDataFromInt:	easy
	-	AlgoDataFromFloat:	hmmm. Double by default is not desirable.
	Make it 64 bit everywhere?
	-	Endianness issues?
-	Replace internal pointers with offsets
	PROs:
		Objects can be trivially serialized, relocated
		resizing gets easier
	CONs:
		Every pointer access gets an extra addition
		Significantly increased internal complexity (no more structs, just bundles of offsets; hard to debug!)
		Can't return pointers into containers (or just document that resizing/relocating will invalidate them)
-	Resizeable objects?
	Requires storing old buffer size
	Some objects way easier than others
	Requires pointer -> offset conversion, or patch-on-resize. Much easier with offsets, though:
		grow is relocate -> resize; shrink is resize -> relocate.
	Use user-provided realloc() callback? Otherwise a user who WANTS to realloc to grow in-place can't.
	AlgoError algoFooResize(AlgoFoo oldFoo, AlgoFoo *newFoo, void *newBuffer, void *newBufferSize, ...)
		newSize = oldSize, newBuffer == oldBuffer:	no-op
		newSize = oldSize, non-overlapping:			memcpy
		newSize = oldSize, overlapping:				memmove (error?)
		newSize < oldSize, newBuffer = oldBuffer	in-place shrink
		newSize < oldSize, non-overlapping:			out-of-place shrink
		newSize < oldSize, overlapping:				ERROR
		newSize > oldSize, newBuffer = oldBuffer	in-place grow
		newSize > oldSize, non-overlapping:			out-of-place grow
		newSize > oldSize, overlapping:				ERROR
	
	WHAT ABOUT THIS:
	Store buffer address and size in all Algo objects.
	AlgoFoo algoFooRelocate(AlgoFoo foo, size_t newBufferSize);
	-	Does not resize.
	-	Implicitly uses foo itself as the address of the new buffer, vs. the stored pointer-to-self as the old buffer.
	-	Patches all internal pointers, applying an offset of (foo - foo.oldBuffer) bytes to each pointer.
	void algoFooResize(AlgoFoo foo, ...,  size_t newBufferSize);
	-	"..." are the relevant parameters from algoFooCreate()
	-	always in-place
	-	When enlarging, requires that the object has already been relocated to a larger buffer.
	-	Any way to leverage the existing algoFooCreate() & avoid lots of duplicated init code?
	use case: realloc() to a larger buffer
	-	user calls realloc(), algoFooRelocate(), algoFooResize()
		-	nope, doesn't work; users still need to know that they can just reassign oldFoo to newBuffer.
			Otherwise, oldFoo's contents are undefined after realloc() succeeds.
		-	Could just make this an official, documented feature.
	-	relocate is a no-op if the current buffer can be expanded in-place
	-	relocate will fail if the new buffer is too small for the current contents.